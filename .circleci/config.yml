version: 2.1

orbs:
  # cypress: cypress-io/cypress@1
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  node: circleci/node@6.3.0
  browser-tools: circleci/browser-tools@1.4.8

executors:
  docker-python:
    docker:
      - image: circleci/python:3.7
  node-executor:
    docker:
      - image: cimg/node:20.16.0-browsers
  # node:
  #   docker:
  #     - image: circleci/node:14
  # test:
  #   docker:
  #     - image: circleci/node:14-browsers

references:
  workspace_root: &workspace_root '~'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: 'Assumes deployment role and persists credentials across jobs'
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  deploy-lambda:
    # executor: node-executor
    description: 'Deploys application'
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      # - node/install
      - run:
          name: Install serverless CLI
          command: sudo npm i -g serverless@^3
      - run:
          name: Deploy application
          command: |
            if [ << parameters.stage >> = "production" ]; then
              export NEXT_PUBLIC_GTM_TOKEN_ID=GTM-PWR54HF
            elif [ << parameters.stage >> = "staging" ]; then
              export NEXT_PUBLIC_GTM_TOKEN_ID=GTM-PWLHK3C
            fi
            yarn build && yarn --production=true && npx --yes serverless deploy --stage staging

jobs:
  build-and-test:
    executor: node-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set up sentry cli
          command: |
            export SENTRY_ORG=$SENTRY_ORG
            export SENTRY_PROJECT=$SENTRY_PROJECT
            export SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN
      - node/install-packages:
          pkg-manager: yarn
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: Force install
          command: yarn cypress install --force
      - run:
          name: build
          command: yarn build
      - run:
          name: Run tests
          command: yarn test
      - run:
          name: Run integration test
          command: yarn test:headless:integration
      - store_artifacts:
          path: /tmp/artifacts

  deploy-to-development:
    executor: node-executor
    steps:
      - deploy-lambda:
          stage: 'development'
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  deploy-to-staging:
    executor: node-executor
    steps:
      - deploy-lambda:
          stage: 'staging'
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  deploy-to-production:
    executor: node-executor
    steps:
      - deploy-lambda:
          stage: 'production'
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

workflows:
  check:
    jobs:
      - build-and-test:
          filters:
            branches:
              ignore: main

  check-and-deploy-staging-and-production:
    jobs:
      # - build-and-test:
      #     filters:
      #       branches:
      #         only: main
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
          # requires:
          #   - build-and-test
      - deploy-to-staging:
          requires:
            - assume-role-staging
      # - permit-production-release:
      #     type: approval
      #     requires:
      #       - deploy-to-staging
      # - assume-role-production:
      #     context: api-assume-role-housing-production-context
      #     requires:
      #       - permit-production-release
      #     filters:
      #       branches:
      #         only: main
      # - deploy-to-production:
      #     context: api-nuget-token-context
      #     requires:
      #       - permit-production-release
      #       - assume-role-production
      #     filters:
      #       branches:
      #         only: main
